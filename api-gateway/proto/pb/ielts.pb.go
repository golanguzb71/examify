// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: ielts.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CalculateTodayExamCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
}

func (x *CalculateTodayExamCountRequest) Reset() {
	*x = CalculateTodayExamCountRequest{}
	mi := &file_ielts_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateTodayExamCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTodayExamCountRequest) ProtoMessage() {}

func (x *CalculateTodayExamCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTodayExamCountRequest.ProtoReflect.Descriptor instead.
func (*CalculateTodayExamCountRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{0}
}

func (x *CalculateTodayExamCountRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CalculateTodayExamCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemainExamCount int32 `protobuf:"varint,2,opt,name=remainExamCount,proto3" json:"remainExamCount"`
}

func (x *CalculateTodayExamCountResponse) Reset() {
	*x = CalculateTodayExamCountResponse{}
	mi := &file_ielts_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateTodayExamCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTodayExamCountResponse) ProtoMessage() {}

func (x *CalculateTodayExamCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTodayExamCountResponse.ProtoReflect.Descriptor instead.
func (*CalculateTodayExamCountResponse) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{1}
}

func (x *CalculateTodayExamCountResponse) GetRemainExamCount() int32 {
	if x != nil {
		return x.RemainExamCount
	}
	return 0
}

type GetVoiceRecordsSpeakingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameVoiceUrl string `protobuf:"bytes,1,opt,name=nameVoiceUrl,proto3" json:"nameVoiceUrl"`
}

func (x *GetVoiceRecordsSpeakingRequest) Reset() {
	*x = GetVoiceRecordsSpeakingRequest{}
	mi := &file_ielts_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVoiceRecordsSpeakingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoiceRecordsSpeakingRequest) ProtoMessage() {}

func (x *GetVoiceRecordsSpeakingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoiceRecordsSpeakingRequest.ProtoReflect.Descriptor instead.
func (*GetVoiceRecordsSpeakingRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{2}
}

func (x *GetVoiceRecordsSpeakingRequest) GetNameVoiceUrl() string {
	if x != nil {
		return x.NameVoiceUrl
	}
	return ""
}

type GetVoiceRecordsSpeakingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceData   []byte `protobuf:"bytes,1,opt,name=voiceData,proto3" json:"voiceData"`
	ContentType string `protobuf:"bytes,2,opt,name=contentType,proto3" json:"contentType"`
}

func (x *GetVoiceRecordsSpeakingResponse) Reset() {
	*x = GetVoiceRecordsSpeakingResponse{}
	mi := &file_ielts_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVoiceRecordsSpeakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoiceRecordsSpeakingResponse) ProtoMessage() {}

func (x *GetVoiceRecordsSpeakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoiceRecordsSpeakingResponse.ProtoReflect.Descriptor instead.
func (*GetVoiceRecordsSpeakingResponse) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{3}
}

func (x *GetVoiceRecordsSpeakingResponse) GetVoiceData() []byte {
	if x != nil {
		return x.VoiceData
	}
	return nil
}

func (x *GetVoiceRecordsSpeakingResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type GetResultOutlineSpeakingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId     string `protobuf:"bytes,1,opt,name=examId,proto3" json:"examId"`
	PartNumber int32  `protobuf:"varint,2,opt,name=partNumber,proto3" json:"partNumber"`
}

func (x *GetResultOutlineSpeakingRequest) Reset() {
	*x = GetResultOutlineSpeakingRequest{}
	mi := &file_ielts_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultOutlineSpeakingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultOutlineSpeakingRequest) ProtoMessage() {}

func (x *GetResultOutlineSpeakingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultOutlineSpeakingRequest.ProtoReflect.Descriptor instead.
func (*GetResultOutlineSpeakingRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{4}
}

func (x *GetResultOutlineSpeakingRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *GetResultOutlineSpeakingRequest) GetPartNumber() int32 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

type GetResultOutlineSpeakingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartNumber      int32            `protobuf:"varint,11,opt,name=part_number,json=partNumber,proto3" json:"part_number"`
	FluencyScore    float32          `protobuf:"fixed32,1,opt,name=fluency_score,json=fluencyScore,proto3" json:"fluency_score"`
	GrammarScore    float32          `protobuf:"fixed32,2,opt,name=grammar_score,json=grammarScore,proto3" json:"grammar_score"`
	VocabularyScore float32          `protobuf:"fixed32,3,opt,name=vocabulary_score,json=vocabularyScore,proto3" json:"vocabulary_score"`
	CoherenceScore  float32          `protobuf:"fixed32,4,opt,name=coherence_score,json=coherenceScore,proto3" json:"coherence_score"`
	TopicDevScore   float32          `protobuf:"fixed32,5,opt,name=topic_dev_score,json=topicDevScore,proto3" json:"topic_dev_score"`
	RelevanceScore  float32          `protobuf:"fixed32,6,opt,name=relevance_score,json=relevanceScore,proto3" json:"relevance_score"`
	WordCount       int32            `protobuf:"varint,7,opt,name=word_count,json=wordCount,proto3" json:"word_count"`
	Transcription   []*Transcription `protobuf:"bytes,8,rep,name=transcription,proto3" json:"transcription"`
	PartBandScore   float32          `protobuf:"fixed32,9,opt,name=part_band_score,json=partBandScore,proto3" json:"part_band_score"`
}

func (x *GetResultOutlineSpeakingResponse) Reset() {
	*x = GetResultOutlineSpeakingResponse{}
	mi := &file_ielts_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultOutlineSpeakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultOutlineSpeakingResponse) ProtoMessage() {}

func (x *GetResultOutlineSpeakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultOutlineSpeakingResponse.ProtoReflect.Descriptor instead.
func (*GetResultOutlineSpeakingResponse) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{5}
}

func (x *GetResultOutlineSpeakingResponse) GetPartNumber() int32 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

func (x *GetResultOutlineSpeakingResponse) GetFluencyScore() float32 {
	if x != nil {
		return x.FluencyScore
	}
	return 0
}

func (x *GetResultOutlineSpeakingResponse) GetGrammarScore() float32 {
	if x != nil {
		return x.GrammarScore
	}
	return 0
}

func (x *GetResultOutlineSpeakingResponse) GetVocabularyScore() float32 {
	if x != nil {
		return x.VocabularyScore
	}
	return 0
}

func (x *GetResultOutlineSpeakingResponse) GetCoherenceScore() float32 {
	if x != nil {
		return x.CoherenceScore
	}
	return 0
}

func (x *GetResultOutlineSpeakingResponse) GetTopicDevScore() float32 {
	if x != nil {
		return x.TopicDevScore
	}
	return 0
}

func (x *GetResultOutlineSpeakingResponse) GetRelevanceScore() float32 {
	if x != nil {
		return x.RelevanceScore
	}
	return 0
}

func (x *GetResultOutlineSpeakingResponse) GetWordCount() int32 {
	if x != nil {
		return x.WordCount
	}
	return 0
}

func (x *GetResultOutlineSpeakingResponse) GetTranscription() []*Transcription {
	if x != nil {
		return x.Transcription
	}
	return nil
}

func (x *GetResultOutlineSpeakingResponse) GetPartBandScore() float32 {
	if x != nil {
		return x.PartBandScore
	}
	return 0
}

type Transcription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question      string `protobuf:"bytes,1,opt,name=question,proto3" json:"question"`
	Feedback      string `protobuf:"bytes,2,opt,name=feedback,proto3" json:"feedback"`
	Transcription string `protobuf:"bytes,3,opt,name=transcription,proto3" json:"transcription"`
	VoiceUrl      string `protobuf:"bytes,10,opt,name=voiceUrl,proto3" json:"voiceUrl"`
}

func (x *Transcription) Reset() {
	*x = Transcription{}
	mi := &file_ielts_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transcription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transcription) ProtoMessage() {}

func (x *Transcription) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transcription.ProtoReflect.Descriptor instead.
func (*Transcription) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{6}
}

func (x *Transcription) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *Transcription) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

func (x *Transcription) GetTranscription() string {
	if x != nil {
		return x.Transcription
	}
	return ""
}

func (x *Transcription) GetVoiceUrl() string {
	if x != nil {
		return x.VoiceUrl
	}
	return ""
}

type UpdateBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
}

func (x *UpdateBookRequest) Reset() {
	*x = UpdateBookRequest{}
	mi := &file_ielts_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBookRequest) ProtoMessage() {}

func (x *UpdateBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBookRequest.ProtoReflect.Descriptor instead.
func (*UpdateBookRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateBookRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBookRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	BandScore float32       `protobuf:"fixed32,2,opt,name=bandScore,proto3" json:"bandScore"`
	Answers   []*UserAnswer `protobuf:"bytes,3,rep,name=answers,proto3" json:"answers"`
	CreatedAt string        `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt"`
}

func (x *GetResultResponse) Reset() {
	*x = GetResultResponse{}
	mi := &file_ielts_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultResponse) ProtoMessage() {}

func (x *GetResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultResponse.ProtoReflect.Descriptor instead.
func (*GetResultResponse) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{8}
}

func (x *GetResultResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetResultResponse) GetBandScore() float32 {
	if x != nil {
		return x.BandScore
	}
	return 0
}

func (x *GetResultResponse) GetAnswers() []*UserAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *GetResultResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type GetResultOutlineAbsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId string `protobuf:"bytes,1,opt,name=examId,proto3" json:"examId"`
}

func (x *GetResultOutlineAbsRequest) Reset() {
	*x = GetResultOutlineAbsRequest{}
	mi := &file_ielts_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultOutlineAbsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultOutlineAbsRequest) ProtoMessage() {}

func (x *GetResultOutlineAbsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultOutlineAbsRequest.ProtoReflect.Descriptor instead.
func (*GetResultOutlineAbsRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{9}
}

func (x *GetResultOutlineAbsRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type GetResultOutlineWritingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answers          []*OutlineWritingResponseAbs `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers"`
	SectionBandScore string                       `protobuf:"bytes,2,opt,name=sectionBandScore,proto3" json:"sectionBandScore"`
}

func (x *GetResultOutlineWritingResponse) Reset() {
	*x = GetResultOutlineWritingResponse{}
	mi := &file_ielts_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultOutlineWritingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultOutlineWritingResponse) ProtoMessage() {}

func (x *GetResultOutlineWritingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultOutlineWritingResponse.ProtoReflect.Descriptor instead.
func (*GetResultOutlineWritingResponse) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{10}
}

func (x *GetResultOutlineWritingResponse) GetAnswers() []*OutlineWritingResponseAbs {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *GetResultOutlineWritingResponse) GetSectionBandScore() string {
	if x != nil {
		return x.SectionBandScore
	}
	return ""
}

type OutlineWritingResponseAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskNumber           int32  `protobuf:"varint,1,opt,name=taskNumber,proto3" json:"taskNumber"`
	UserAnswer           string `protobuf:"bytes,2,opt,name=userAnswer,proto3" json:"userAnswer"`
	Question             string `protobuf:"bytes,3,opt,name=question,proto3" json:"question"`
	Feedback             string `protobuf:"bytes,4,opt,name=feedback,proto3" json:"feedback"`
	CoherenceScore       string `protobuf:"bytes,5,opt,name=coherenceScore,proto3" json:"coherenceScore"`
	GrammarScore         string `protobuf:"bytes,6,opt,name=grammarScore,proto3" json:"grammarScore"`
	LexicalResourceScore string `protobuf:"bytes,7,opt,name=lexicalResourceScore,proto3" json:"lexicalResourceScore"`
	TaskAchievementScore string `protobuf:"bytes,8,opt,name=taskAchievementScore,proto3" json:"taskAchievementScore"`
	TaskBandScore        string `protobuf:"bytes,9,opt,name=taskBandScore,proto3" json:"taskBandScore"`
	CreatedAt            string `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt"`
}

func (x *OutlineWritingResponseAbs) Reset() {
	*x = OutlineWritingResponseAbs{}
	mi := &file_ielts_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutlineWritingResponseAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutlineWritingResponseAbs) ProtoMessage() {}

func (x *OutlineWritingResponseAbs) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutlineWritingResponseAbs.ProtoReflect.Descriptor instead.
func (*OutlineWritingResponseAbs) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{11}
}

func (x *OutlineWritingResponseAbs) GetTaskNumber() int32 {
	if x != nil {
		return x.TaskNumber
	}
	return 0
}

func (x *OutlineWritingResponseAbs) GetUserAnswer() string {
	if x != nil {
		return x.UserAnswer
	}
	return ""
}

func (x *OutlineWritingResponseAbs) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *OutlineWritingResponseAbs) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

func (x *OutlineWritingResponseAbs) GetCoherenceScore() string {
	if x != nil {
		return x.CoherenceScore
	}
	return ""
}

func (x *OutlineWritingResponseAbs) GetGrammarScore() string {
	if x != nil {
		return x.GrammarScore
	}
	return ""
}

func (x *OutlineWritingResponseAbs) GetLexicalResourceScore() string {
	if x != nil {
		return x.LexicalResourceScore
	}
	return ""
}

func (x *OutlineWritingResponseAbs) GetTaskAchievementScore() string {
	if x != nil {
		return x.TaskAchievementScore
	}
	return ""
}

func (x *OutlineWritingResponseAbs) GetTaskBandScore() string {
	if x != nil {
		return x.TaskBandScore
	}
	return ""
}

func (x *OutlineWritingResponseAbs) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type UserAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAnswer string `protobuf:"bytes,1,opt,name=userAnswer,proto3" json:"userAnswer"`
	TrueAnswer string `protobuf:"bytes,2,opt,name=trueAnswer,proto3" json:"trueAnswer"`
	IsTrue     bool   `protobuf:"varint,3,opt,name=isTrue,proto3" json:"isTrue"`
}

func (x *UserAnswer) Reset() {
	*x = UserAnswer{}
	mi := &file_ielts_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnswer) ProtoMessage() {}

func (x *UserAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnswer.ProtoReflect.Descriptor instead.
func (*UserAnswer) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{12}
}

func (x *UserAnswer) GetUserAnswer() string {
	if x != nil {
		return x.UserAnswer
	}
	return ""
}

func (x *UserAnswer) GetTrueAnswer() string {
	if x != nil {
		return x.TrueAnswer
	}
	return ""
}

func (x *UserAnswer) GetIsTrue() bool {
	if x != nil {
		return x.IsTrue
	}
	return false
}

type GetResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId  string `protobuf:"bytes,1,opt,name=examId,proto3" json:"examId"`
	Section string `protobuf:"bytes,2,opt,name=section,proto3" json:"section"`
}

func (x *GetResultRequest) Reset() {
	*x = GetResultRequest{}
	mi := &file_ielts_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultRequest) ProtoMessage() {}

func (x *GetResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultRequest.ProtoReflect.Descriptor instead.
func (*GetResultRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{13}
}

func (x *GetResultRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *GetResultRequest) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

type CreateBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
}

func (x *CreateBookRequest) Reset() {
	*x = CreateBookRequest{}
	mi := &file_ielts_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBookRequest) ProtoMessage() {}

func (x *CreateBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBookRequest.ProtoReflect.Descriptor instead.
func (*CreateBookRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{14}
}

func (x *CreateBookRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTopExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataframe   string       `protobuf:"bytes,1,opt,name=dataframe,proto3" json:"dataframe"`
	PageRequest *PageRequest `protobuf:"bytes,2,opt,name=pageRequest,proto3" json:"pageRequest"`
}

func (x *GetTopExamRequest) Reset() {
	*x = GetTopExamRequest{}
	mi := &file_ielts_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopExamRequest) ProtoMessage() {}

func (x *GetTopExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopExamRequest.ProtoReflect.Descriptor instead.
func (*GetTopExamRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{15}
}

func (x *GetTopExamRequest) GetDataframe() string {
	if x != nil {
		return x.Dataframe
	}
	return ""
}

func (x *GetTopExamRequest) GetPageRequest() *PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

type GetTopExamResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results        []*Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results"`
	TotalPageCount int32     `protobuf:"varint,2,opt,name=totalPageCount,proto3" json:"totalPageCount"`
}

func (x *GetTopExamResult) Reset() {
	*x = GetTopExamResult{}
	mi := &file_ielts_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopExamResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopExamResult) ProtoMessage() {}

func (x *GetTopExamResult) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopExamResult.ProtoReflect.Descriptor instead.
func (*GetTopExamResult) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{16}
}

func (x *GetTopExamResult) GetResults() []*Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GetTopExamResult) GetTotalPageCount() int32 {
	if x != nil {
		return x.TotalPageCount
	}
	return 0
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user"`
	BookName  string `protobuf:"bytes,2,opt,name=bookName,proto3" json:"bookName"`
	CreatedAt string `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt"`
	Overall   string `protobuf:"bytes,4,opt,name=overall,proto3" json:"overall"`
	Speaking  string `protobuf:"bytes,5,opt,name=speaking,proto3" json:"speaking"`
	Writing   string `protobuf:"bytes,6,opt,name=writing,proto3" json:"writing"`
	Listening string `protobuf:"bytes,7,opt,name=listening,proto3" json:"listening"`
	Reading   string `protobuf:"bytes,8,opt,name=reading,proto3" json:"reading"`
	ExamId    string `protobuf:"bytes,9,opt,name=examId,proto3" json:"examId"`
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_ielts_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{17}
}

func (x *Result) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Result) GetBookName() string {
	if x != nil {
		return x.BookName
	}
	return ""
}

func (x *Result) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Result) GetOverall() string {
	if x != nil {
		return x.Overall
	}
	return ""
}

func (x *Result) GetSpeaking() string {
	if x != nil {
		return x.Speaking
	}
	return ""
}

func (x *Result) GetWriting() string {
	if x != nil {
		return x.Writing
	}
	return ""
}

func (x *Result) GetListening() string {
	if x != nil {
		return x.Listening
	}
	return ""
}

func (x *Result) GetReading() string {
	if x != nil {
		return x.Reading
	}
	return ""
}

func (x *Result) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type CreateExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId string `protobuf:"bytes,1,opt,name=examId,proto3" json:"examId"`
}

func (x *CreateExamResponse) Reset() {
	*x = CreateExamResponse{}
	mi := &file_ielts_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExamResponse) ProtoMessage() {}

func (x *CreateExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExamResponse.ProtoReflect.Descriptor instead.
func (*CreateExamResponse) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{18}
}

func (x *CreateExamResponse) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type GetExamByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results        []*GetExamAbsResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results"`
	TotalPageCount int32               `protobuf:"varint,2,opt,name=totalPageCount,proto3" json:"totalPageCount"`
}

func (x *GetExamByUserIdResponse) Reset() {
	*x = GetExamByUserIdResponse{}
	mi := &file_ielts_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamByUserIdResponse) ProtoMessage() {}

func (x *GetExamByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetExamByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{19}
}

func (x *GetExamByUserIdResponse) GetResults() []*GetExamAbsResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GetExamByUserIdResponse) GetTotalPageCount() int32 {
	if x != nil {
		return x.TotalPageCount
	}
	return 0
}

type GetExamAbsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookName             string `protobuf:"bytes,2,opt,name=bookName,proto3" json:"bookName"`
	CreatedAt            string `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt"`
	Overall              string `protobuf:"bytes,4,opt,name=overall,proto3" json:"overall"`
	Speaking             string `protobuf:"bytes,5,opt,name=speaking,proto3" json:"speaking"`
	Writing              string `protobuf:"bytes,6,opt,name=writing,proto3" json:"writing"`
	Listening            string `protobuf:"bytes,7,opt,name=listening,proto3" json:"listening"`
	Reading              string `protobuf:"bytes,8,opt,name=reading,proto3" json:"reading"`
	ExamId               string `protobuf:"bytes,9,opt,name=examId,proto3" json:"examId"`
	Status               string `protobuf:"bytes,10,opt,name=status,proto3" json:"status"`
	RemainTimeForEndExam int32  `protobuf:"varint,11,opt,name=remainTimeForEndExam,proto3" json:"remainTimeForEndExam"`
	RemainSection        string `protobuf:"bytes,12,opt,name=remainSection,proto3" json:"remainSection"`
}

func (x *GetExamAbsResult) Reset() {
	*x = GetExamAbsResult{}
	mi := &file_ielts_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamAbsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamAbsResult) ProtoMessage() {}

func (x *GetExamAbsResult) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamAbsResult.ProtoReflect.Descriptor instead.
func (*GetExamAbsResult) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{20}
}

func (x *GetExamAbsResult) GetBookName() string {
	if x != nil {
		return x.BookName
	}
	return ""
}

func (x *GetExamAbsResult) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetExamAbsResult) GetOverall() string {
	if x != nil {
		return x.Overall
	}
	return ""
}

func (x *GetExamAbsResult) GetSpeaking() string {
	if x != nil {
		return x.Speaking
	}
	return ""
}

func (x *GetExamAbsResult) GetWriting() string {
	if x != nil {
		return x.Writing
	}
	return ""
}

func (x *GetExamAbsResult) GetListening() string {
	if x != nil {
		return x.Listening
	}
	return ""
}

func (x *GetExamAbsResult) GetReading() string {
	if x != nil {
		return x.Reading
	}
	return ""
}

func (x *GetExamAbsResult) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *GetExamAbsResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetExamAbsResult) GetRemainTimeForEndExam() int32 {
	if x != nil {
		return x.RemainTimeForEndExam
	}
	return 0
}

func (x *GetExamAbsResult) GetRemainSection() string {
	if x != nil {
		return x.RemainSection
	}
	return ""
}

type CreateExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
	BookId int32 `protobuf:"varint,2,opt,name=bookId,proto3" json:"bookId"`
}

func (x *CreateExamRequest) Reset() {
	*x = CreateExamRequest{}
	mi := &file_ielts_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExamRequest) ProtoMessage() {}

func (x *CreateExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExamRequest.ProtoReflect.Descriptor instead.
func (*CreateExamRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{21}
}

func (x *CreateExamRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateExamRequest) GetBookId() int32 {
	if x != nil {
		return x.BookId
	}
	return 0
}

type GetExamByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32        `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
	PageRequest *PageRequest `protobuf:"bytes,2,opt,name=pageRequest,proto3" json:"pageRequest"`
}

func (x *GetExamByUserIdRequest) Reset() {
	*x = GetExamByUserIdRequest{}
	mi := &file_ielts_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamByUserIdRequest) ProtoMessage() {}

func (x *GetExamByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetExamByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{22}
}

func (x *GetExamByUserIdRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetExamByUserIdRequest) GetPageRequest() *PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

type DeleteBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookId string `protobuf:"bytes,1,opt,name=bookId,proto3" json:"bookId"`
}

func (x *DeleteBookRequest) Reset() {
	*x = DeleteBookRequest{}
	mi := &file_ielts_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookRequest) ProtoMessage() {}

func (x *DeleteBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookRequest.ProtoReflect.Descriptor instead.
func (*DeleteBookRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteBookRequest) GetBookId() string {
	if x != nil {
		return x.BookId
	}
	return ""
}

type GetAllBookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Books []*Book `protobuf:"bytes,1,rep,name=books,proto3" json:"books"`
}

func (x *GetAllBookResponse) Reset() {
	*x = GetAllBookResponse{}
	mi := &file_ielts_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllBookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBookResponse) ProtoMessage() {}

func (x *GetAllBookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBookResponse.ProtoReflect.Descriptor instead.
func (*GetAllBookResponse) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{24}
}

func (x *GetAllBookResponse) GetBooks() []*Book {
	if x != nil {
		return x.Books
	}
	return nil
}

type CreateAnswerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookId      string   `protobuf:"bytes,1,opt,name=bookId,proto3" json:"bookId"`
	SectionType string   `protobuf:"bytes,2,opt,name=sectionType,proto3" json:"sectionType"`
	Answers     []string `protobuf:"bytes,3,rep,name=answers,proto3" json:"answers"`
}

func (x *CreateAnswerRequest) Reset() {
	*x = CreateAnswerRequest{}
	mi := &file_ielts_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAnswerRequest) ProtoMessage() {}

func (x *CreateAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAnswerRequest.ProtoReflect.Descriptor instead.
func (*CreateAnswerRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{25}
}

func (x *CreateAnswerRequest) GetBookId() string {
	if x != nil {
		return x.BookId
	}
	return ""
}

func (x *CreateAnswerRequest) GetSectionType() string {
	if x != nil {
		return x.SectionType
	}
	return ""
}

func (x *CreateAnswerRequest) GetAnswers() []string {
	if x != nil {
		return x.Answers
	}
	return nil
}

type GetAnswerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookId string `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id"`
}

func (x *GetAnswerRequest) Reset() {
	*x = GetAnswerRequest{}
	mi := &file_ielts_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnswerRequest) ProtoMessage() {}

func (x *GetAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnswerRequest.ProtoReflect.Descriptor instead.
func (*GetAnswerRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{26}
}

func (x *GetAnswerRequest) GetBookId() string {
	if x != nil {
		return x.BookId
	}
	return ""
}

type GetAnswerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answers []*Answer `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers"`
}

func (x *GetAnswerResponse) Reset() {
	*x = GetAnswerResponse{}
	mi := &file_ielts_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnswerResponse) ProtoMessage() {}

func (x *GetAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnswerResponse.ProtoReflect.Descriptor instead.
func (*GetAnswerResponse) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{27}
}

func (x *GetAnswerResponse) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	BookId        int32    `protobuf:"varint,2,opt,name=bookId,proto3" json:"bookId"`
	SectionType   string   `protobuf:"bytes,3,opt,name=sectionType,proto3" json:"sectionType"`
	SectionAnswer []string `protobuf:"bytes,4,rep,name=sectionAnswer,proto3" json:"sectionAnswer"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	mi := &file_ielts_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{28}
}

func (x *Answer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Answer) GetBookId() int32 {
	if x != nil {
		return x.BookId
	}
	return 0
}

func (x *Answer) GetSectionType() string {
	if x != nil {
		return x.SectionType
	}
	return ""
}

func (x *Answer) GetSectionAnswer() []string {
	if x != nil {
		return x.SectionAnswer
	}
	return nil
}

type Book struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
}

func (x *Book) Reset() {
	*x = Book{}
	mi := &file_ielts_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Book) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book) ProtoMessage() {}

func (x *Book) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book.ProtoReflect.Descriptor instead.
func (*Book) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{29}
}

func (x *Book) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Book) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type CreateInlineAttemptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId      string   `protobuf:"bytes,1,opt,name=examId,proto3" json:"examId"`
	UserAnswer  []string `protobuf:"bytes,2,rep,name=userAnswer,proto3" json:"userAnswer"`
	SectionType string   `protobuf:"bytes,3,opt,name=sectionType,proto3" json:"sectionType"`
}

func (x *CreateInlineAttemptRequest) Reset() {
	*x = CreateInlineAttemptRequest{}
	mi := &file_ielts_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInlineAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInlineAttemptRequest) ProtoMessage() {}

func (x *CreateInlineAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInlineAttemptRequest.ProtoReflect.Descriptor instead.
func (*CreateInlineAttemptRequest) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{30}
}

func (x *CreateInlineAttemptRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *CreateInlineAttemptRequest) GetUserAnswer() []string {
	if x != nil {
		return x.UserAnswer
	}
	return nil
}

func (x *CreateInlineAttemptRequest) GetSectionType() string {
	if x != nil {
		return x.SectionType
	}
	return ""
}

type CreateOutlineAttemptRequestWriting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId string                       `protobuf:"bytes,1,opt,name=examId,proto3" json:"examId"`
	Qua    []*QuestionUserAnswerWriting `protobuf:"bytes,2,rep,name=Qua,proto3" json:"Qua"`
}

func (x *CreateOutlineAttemptRequestWriting) Reset() {
	*x = CreateOutlineAttemptRequestWriting{}
	mi := &file_ielts_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOutlineAttemptRequestWriting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOutlineAttemptRequestWriting) ProtoMessage() {}

func (x *CreateOutlineAttemptRequestWriting) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOutlineAttemptRequestWriting.ProtoReflect.Descriptor instead.
func (*CreateOutlineAttemptRequestWriting) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{31}
}

func (x *CreateOutlineAttemptRequestWriting) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *CreateOutlineAttemptRequestWriting) GetQua() []*QuestionUserAnswerWriting {
	if x != nil {
		return x.Qua
	}
	return nil
}

type CreateOutlineAttemptRequestSpeaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId      string `protobuf:"bytes,1,opt,name=examId,proto3" json:"examId"`
	Question    string `protobuf:"bytes,2,opt,name=question,proto3" json:"question"`
	VoiceAnswer []byte `protobuf:"bytes,3,opt,name=voiceAnswer,proto3" json:"voiceAnswer"`
	PartNumber  int32  `protobuf:"varint,4,opt,name=partNumber,proto3" json:"partNumber"`
}

func (x *CreateOutlineAttemptRequestSpeaking) Reset() {
	*x = CreateOutlineAttemptRequestSpeaking{}
	mi := &file_ielts_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOutlineAttemptRequestSpeaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOutlineAttemptRequestSpeaking) ProtoMessage() {}

func (x *CreateOutlineAttemptRequestSpeaking) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOutlineAttemptRequestSpeaking.ProtoReflect.Descriptor instead.
func (*CreateOutlineAttemptRequestSpeaking) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{32}
}

func (x *CreateOutlineAttemptRequestSpeaking) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *CreateOutlineAttemptRequestSpeaking) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *CreateOutlineAttemptRequestSpeaking) GetVoiceAnswer() []byte {
	if x != nil {
		return x.VoiceAnswer
	}
	return nil
}

func (x *CreateOutlineAttemptRequestSpeaking) GetPartNumber() int32 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

type QuestionUserAnswerWriting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question   string `protobuf:"bytes,1,opt,name=question,proto3" json:"question"`
	UserAnswer string `protobuf:"bytes,2,opt,name=userAnswer,proto3" json:"userAnswer"`
}

func (x *QuestionUserAnswerWriting) Reset() {
	*x = QuestionUserAnswerWriting{}
	mi := &file_ielts_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionUserAnswerWriting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionUserAnswerWriting) ProtoMessage() {}

func (x *QuestionUserAnswerWriting) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionUserAnswerWriting.ProtoReflect.Descriptor instead.
func (*QuestionUserAnswerWriting) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{33}
}

func (x *QuestionUserAnswerWriting) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QuestionUserAnswerWriting) GetUserAnswer() string {
	if x != nil {
		return x.UserAnswer
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_ielts_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_ielts_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_ielts_proto_rawDescGZIP(), []int{34}
}

var File_ielts_proto protoreflect.FileDescriptor

var file_ielts_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x69,
	0x65, 0x6c, 0x74, 0x73, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x38, 0x0a, 0x1e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x64, 0x61, 0x79, 0x45, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x1f,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x45, 0x78,
	0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x45, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x22,
	0x61, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x59, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb5, 0x03,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x44, 0x65, 0x76, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x42, 0x61, 0x6e, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x22, 0x37, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b,
	0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x34, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x62, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x22,
	0x89, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x41, 0x62, 0x73, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8b, 0x03, 0x0a, 0x19,
	0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x62, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x61, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x65, 0x78,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x6e,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61,
	0x73, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x64, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x75,
	0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x54, 0x72, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x72, 0x75, 0x65, 0x22,
	0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x68,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x84, 0x02,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x72,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x72, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78,
	0x61, 0x6d, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d,
	0x49, 0x64, 0x22, 0x74, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xde, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x32, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x45, 0x6e, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x64, 0x45,
	0x78, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x22, 0x67,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f,
	0x6f, 0x6b, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x62, 0x6f,
	0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x65, 0x6c, 0x74,
	0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x69, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x2b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x65,
	0x6c, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x73, 0x22, 0x78, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62,
	0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x2c, 0x0a,
	0x04, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x76, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x61,
	0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x70, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x61,
	0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x03, 0x51, 0x75, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x03, 0x51, 0x75, 0x61, 0x22, 0x9b, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xa6, 0x0b, 0x0a, 0x0c, 0x49, 0x65, 0x6c, 0x74, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x18, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x12, 0x18, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x0c,
	0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x69,
	0x65, 0x6c, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x12, 0x18, 0x2e, 0x69, 0x65, 0x6c, 0x74,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x69, 0x65, 0x6c, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x18, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x42, 0x79, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x69, 0x65, 0x6c,
	0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x41, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x65,
	0x6c, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x26, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x21, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e, 0x69, 0x65, 0x6c, 0x74,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x2e, 0x69, 0x65, 0x6c, 0x74,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69,
	0x65, 0x6c, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x17, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x45, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x45, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x65, 0x6c, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x45, 0x78, 0x61,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0c,
	0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ielts_proto_rawDescOnce sync.Once
	file_ielts_proto_rawDescData = file_ielts_proto_rawDesc
)

func file_ielts_proto_rawDescGZIP() []byte {
	file_ielts_proto_rawDescOnce.Do(func() {
		file_ielts_proto_rawDescData = protoimpl.X.CompressGZIP(file_ielts_proto_rawDescData)
	})
	return file_ielts_proto_rawDescData
}

var file_ielts_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_ielts_proto_goTypes = []any{
	(*CalculateTodayExamCountRequest)(nil),      // 0: ielts.CalculateTodayExamCountRequest
	(*CalculateTodayExamCountResponse)(nil),     // 1: ielts.CalculateTodayExamCountResponse
	(*GetVoiceRecordsSpeakingRequest)(nil),      // 2: ielts.GetVoiceRecordsSpeakingRequest
	(*GetVoiceRecordsSpeakingResponse)(nil),     // 3: ielts.GetVoiceRecordsSpeakingResponse
	(*GetResultOutlineSpeakingRequest)(nil),     // 4: ielts.GetResultOutlineSpeakingRequest
	(*GetResultOutlineSpeakingResponse)(nil),    // 5: ielts.GetResultOutlineSpeakingResponse
	(*Transcription)(nil),                       // 6: ielts.Transcription
	(*UpdateBookRequest)(nil),                   // 7: ielts.UpdateBookRequest
	(*GetResultResponse)(nil),                   // 8: ielts.GetResultResponse
	(*GetResultOutlineAbsRequest)(nil),          // 9: ielts.GetResultOutlineAbsRequest
	(*GetResultOutlineWritingResponse)(nil),     // 10: ielts.GetResultOutlineWritingResponse
	(*OutlineWritingResponseAbs)(nil),           // 11: ielts.OutlineWritingResponseAbs
	(*UserAnswer)(nil),                          // 12: ielts.UserAnswer
	(*GetResultRequest)(nil),                    // 13: ielts.GetResultRequest
	(*CreateBookRequest)(nil),                   // 14: ielts.CreateBookRequest
	(*GetTopExamRequest)(nil),                   // 15: ielts.GetTopExamRequest
	(*GetTopExamResult)(nil),                    // 16: ielts.GetTopExamResult
	(*Result)(nil),                              // 17: ielts.Result
	(*CreateExamResponse)(nil),                  // 18: ielts.CreateExamResponse
	(*GetExamByUserIdResponse)(nil),             // 19: ielts.GetExamByUserIdResponse
	(*GetExamAbsResult)(nil),                    // 20: ielts.GetExamAbsResult
	(*CreateExamRequest)(nil),                   // 21: ielts.CreateExamRequest
	(*GetExamByUserIdRequest)(nil),              // 22: ielts.GetExamByUserIdRequest
	(*DeleteBookRequest)(nil),                   // 23: ielts.DeleteBookRequest
	(*GetAllBookResponse)(nil),                  // 24: ielts.GetAllBookResponse
	(*CreateAnswerRequest)(nil),                 // 25: ielts.CreateAnswerRequest
	(*GetAnswerRequest)(nil),                    // 26: ielts.GetAnswerRequest
	(*GetAnswerResponse)(nil),                   // 27: ielts.GetAnswerResponse
	(*Answer)(nil),                              // 28: ielts.Answer
	(*Book)(nil),                                // 29: ielts.Book
	(*CreateInlineAttemptRequest)(nil),          // 30: ielts.CreateInlineAttemptRequest
	(*CreateOutlineAttemptRequestWriting)(nil),  // 31: ielts.CreateOutlineAttemptRequestWriting
	(*CreateOutlineAttemptRequestSpeaking)(nil), // 32: ielts.CreateOutlineAttemptRequestSpeaking
	(*QuestionUserAnswerWriting)(nil),           // 33: ielts.QuestionUserAnswerWriting
	(*Empty)(nil),                               // 34: ielts.Empty
	(*PageRequest)(nil),                         // 35: common.PageRequest
	(*User)(nil),                                // 36: common.User
	(*AbsResponse)(nil),                         // 37: common.AbsResponse
}
var file_ielts_proto_depIdxs = []int32{
	6,  // 0: ielts.GetResultOutlineSpeakingResponse.transcription:type_name -> ielts.Transcription
	12, // 1: ielts.GetResultResponse.answers:type_name -> ielts.UserAnswer
	11, // 2: ielts.GetResultOutlineWritingResponse.answers:type_name -> ielts.OutlineWritingResponseAbs
	35, // 3: ielts.GetTopExamRequest.pageRequest:type_name -> common.PageRequest
	17, // 4: ielts.GetTopExamResult.results:type_name -> ielts.Result
	36, // 5: ielts.Result.user:type_name -> common.User
	20, // 6: ielts.GetExamByUserIdResponse.results:type_name -> ielts.GetExamAbsResult
	35, // 7: ielts.GetExamByUserIdRequest.pageRequest:type_name -> common.PageRequest
	29, // 8: ielts.GetAllBookResponse.books:type_name -> ielts.Book
	28, // 9: ielts.GetAnswerResponse.answers:type_name -> ielts.Answer
	33, // 10: ielts.CreateOutlineAttemptRequestWriting.Qua:type_name -> ielts.QuestionUserAnswerWriting
	14, // 11: ielts.IeltsService.CreateBook:input_type -> ielts.CreateBookRequest
	23, // 12: ielts.IeltsService.DeleteBook:input_type -> ielts.DeleteBookRequest
	34, // 13: ielts.IeltsService.GetAllBook:input_type -> ielts.Empty
	7,  // 14: ielts.IeltsService.UpdateBookById:input_type -> ielts.UpdateBookRequest
	25, // 15: ielts.IeltsService.CreateAnswer:input_type -> ielts.CreateAnswerRequest
	23, // 16: ielts.IeltsService.DeleteAnswer:input_type -> ielts.DeleteBookRequest
	26, // 17: ielts.IeltsService.GetAnswer:input_type -> ielts.GetAnswerRequest
	21, // 18: ielts.IeltsService.CreateExam:input_type -> ielts.CreateExamRequest
	22, // 19: ielts.IeltsService.GetExamByUserId:input_type -> ielts.GetExamByUserIdRequest
	13, // 20: ielts.IeltsService.GetResultsInlineBySection:input_type -> ielts.GetResultRequest
	9,  // 21: ielts.IeltsService.GetResultOutlineWriting:input_type -> ielts.GetResultOutlineAbsRequest
	4,  // 22: ielts.IeltsService.GetResultOutlineSpeaking:input_type -> ielts.GetResultOutlineSpeakingRequest
	15, // 23: ielts.IeltsService.GetTopExamResultList:input_type -> ielts.GetTopExamRequest
	30, // 24: ielts.IeltsService.CreateAttemptInline:input_type -> ielts.CreateInlineAttemptRequest
	31, // 25: ielts.IeltsService.CreateAttemptOutlineWriting:input_type -> ielts.CreateOutlineAttemptRequestWriting
	32, // 26: ielts.IeltsService.CreateAttemptOutlineSpeaking:input_type -> ielts.CreateOutlineAttemptRequestSpeaking
	2,  // 27: ielts.IeltsService.GetVoiceRecordsSpeaking:input_type -> ielts.GetVoiceRecordsSpeakingRequest
	0,  // 28: ielts.IeltsService.CalculateTodayExamCount:input_type -> ielts.CalculateTodayExamCountRequest
	37, // 29: ielts.IeltsService.CreateBook:output_type -> common.AbsResponse
	37, // 30: ielts.IeltsService.DeleteBook:output_type -> common.AbsResponse
	24, // 31: ielts.IeltsService.GetAllBook:output_type -> ielts.GetAllBookResponse
	37, // 32: ielts.IeltsService.UpdateBookById:output_type -> common.AbsResponse
	37, // 33: ielts.IeltsService.CreateAnswer:output_type -> common.AbsResponse
	37, // 34: ielts.IeltsService.DeleteAnswer:output_type -> common.AbsResponse
	27, // 35: ielts.IeltsService.GetAnswer:output_type -> ielts.GetAnswerResponse
	18, // 36: ielts.IeltsService.CreateExam:output_type -> ielts.CreateExamResponse
	19, // 37: ielts.IeltsService.GetExamByUserId:output_type -> ielts.GetExamByUserIdResponse
	8,  // 38: ielts.IeltsService.GetResultsInlineBySection:output_type -> ielts.GetResultResponse
	10, // 39: ielts.IeltsService.GetResultOutlineWriting:output_type -> ielts.GetResultOutlineWritingResponse
	5,  // 40: ielts.IeltsService.GetResultOutlineSpeaking:output_type -> ielts.GetResultOutlineSpeakingResponse
	16, // 41: ielts.IeltsService.GetTopExamResultList:output_type -> ielts.GetTopExamResult
	37, // 42: ielts.IeltsService.CreateAttemptInline:output_type -> common.AbsResponse
	37, // 43: ielts.IeltsService.CreateAttemptOutlineWriting:output_type -> common.AbsResponse
	37, // 44: ielts.IeltsService.CreateAttemptOutlineSpeaking:output_type -> common.AbsResponse
	3,  // 45: ielts.IeltsService.GetVoiceRecordsSpeaking:output_type -> ielts.GetVoiceRecordsSpeakingResponse
	1,  // 46: ielts.IeltsService.CalculateTodayExamCount:output_type -> ielts.CalculateTodayExamCountResponse
	29, // [29:47] is the sub-list for method output_type
	11, // [11:29] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_ielts_proto_init() }
func file_ielts_proto_init() {
	if File_ielts_proto != nil {
		return
	}
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ielts_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ielts_proto_goTypes,
		DependencyIndexes: file_ielts_proto_depIdxs,
		MessageInfos:      file_ielts_proto_msgTypes,
	}.Build()
	File_ielts_proto = out.File
	file_ielts_proto_rawDesc = nil
	file_ielts_proto_goTypes = nil
	file_ielts_proto_depIdxs = nil
}
