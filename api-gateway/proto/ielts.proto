syntax = "proto3";

package ielts;

option go_package = "./proto/pb";

import "common.proto";


service IeltsService {
  rpc CreateBook(CreateBookRequest) returns (common.AbsResponse);
  rpc DeleteBook(DeleteBookRequest) returns (common.AbsResponse);
  rpc GetAllBook(Empty) returns (GetAllBookResponse);
  rpc UpdateBookById(UpdateBookRequest) returns(common.AbsResponse);
  rpc CreateAnswer(CreateAnswerRequest) returns (common.AbsResponse);
  rpc DeleteAnswer(DeleteBookRequest) returns (common.AbsResponse);
  rpc GetAnswer(GetAnswerRequest) returns (GetAnswerResponse);
  rpc CreateExam(CreateExamRequest) returns (CreateExamResponse);
  rpc GetExamByUserId(GetExamByUserIdRequest) returns (GetExamByUserIdResponse);
  rpc GetResultsInlineBySection(GetResultRequest) returns(GetResultResponse);
  rpc GetResultOutlineWriting(GetResultOutlineAbsRequest) returns(GetResultOutlineWritingResponse);
  rpc GetResultOutlineSpeaking(GetResultOutlineSpeakingRequest) returns(GetResultOutlineSpeakingResponse);
  rpc GetTopExamResultList(GetTopExamRequest) returns (GetTopExamResult);
  rpc CreateAttemptInline(CreateInlineAttemptRequest) returns (common.AbsResponse);
  rpc CreateAttemptOutlineWriting(CreateOutlineAttemptRequestWriting) returns (common.AbsResponse);
  rpc CreateAttemptOutlineSpeaking(CreateOutlineAttemptRequestSpeaking) returns (common.AbsResponse);
  rpc GetVoiceRecordsSpeaking(GetVoiceRecordsSpeakingRequest)returns(GetVoiceRecordsSpeakingResponse);
}
message GetVoiceRecordsSpeakingRequest{
  string nameVoiceUrl = 1;
}

message GetVoiceRecordsSpeakingResponse {
  bytes voiceData = 1;
  string contentType = 2;
}
message GetResultOutlineSpeakingRequest{
  string examId = 1;
  int32 partNumber = 2;
}

message GetResultOutlineSpeakingResponse{
  repeated SpeakingPartsResponse answers = 1;
}

message SpeakingPartsResponse {
  int32 part_number = 11;
  float fluency_score = 1;
  float grammar_score = 2;
  float vocabulary_score = 3;
  float coherence_score = 4;
  float topic_dev_score = 5;
  float relevance_score = 6;
  int32 word_count = 7;
  Transcription transcription = 8;
  float part_band_score = 9;
}

message Transcription {
  string question = 1;
  string feedback = 2;
  string transcription = 3;
  string voiceUrl = 10;
}

message UpdateBookRequest{
  string id = 1;
  string name = 2;
}

message GetResultResponse{
  string id = 1;
  float bandScore = 2;
  repeated UserAnswer answers = 3;
  string createdAt = 4;
}

message GetResultOutlineAbsRequest{
  string examId = 1;
}
message GetResultOutlineWritingResponse{
  repeated OutlineWritingResponseAbs answers = 1;
  int32 sectionBandScore = 2;
}

message OutlineWritingResponseAbs{
  int32 taskNumber = 1;
  string userAnswer = 2;
  string question = 3;
  string feedback = 4;
  int32 coherenceScore = 5;
  int32 grammarScore = 6;
  int32 lexicalResourceScore = 7;
  int32 taskAchievementScore = 8;
  int32 taskBandScore = 9;
  string createdAt = 10;
}

message UserAnswer{
  string userAnswer = 1;
  string trueAnswer = 2;
  bool isTrue = 3;
}

message GetResultRequest{
  string examId = 1;
  string section = 2;
}

message CreateBookRequest {
  string name = 1;
}

message GetTopExamRequest{
  string dataframe = 1;
  common.PageRequest pageRequest = 2;
}

message GetTopExamResult{
  repeated Result results = 1;
  int32 totalPageCount = 2;
}

message Result {
  common.User user = 1;
  string bookName = 2;
  string createdAt = 3;
  string overall = 4;
  string speaking = 5;
  string writing = 6;
  string listening = 7;
  string reading = 8;
  string examId = 9;
}

message CreateExamResponse {
  string examId = 1;
}

message GetExamByUserIdResponse {
  repeated GetExamAbsResult results = 1;
  int32 totalPageCount = 2;
}

message GetExamAbsResult{
  string bookName = 2;
  string createdAt = 3;
  string overall = 4;
  string speaking = 5;
  string writing = 6;
  string listening = 7;
  string reading = 8;
  string examId = 9;
  string status = 10;
  int32 remainTimeForEndExam = 11;
  string remainSection = 12;
}

message CreateExamRequest {
  int32 userId = 1;
  int32 bookId = 2;
}

message GetExamByUserIdRequest {
  int32 userId = 1;
  common.PageRequest pageRequest = 2;
}

message DeleteBookRequest {
  string bookId = 1;
}

message GetAllBookResponse {
  repeated Book books = 1;
}

message CreateAnswerRequest {
  string bookId = 1;
  string sectionType = 2;
  repeated string answers = 3;
}

message GetAnswerRequest {
  string book_id = 1;
}

message GetAnswerResponse {
  repeated Answer answers = 1;
}

message Answer {
  int32 id = 1;
  int32 bookId = 2;
  string sectionType = 3;
  repeated string sectionAnswer = 4;
}

message Book {
  int32 id = 1;
  string title = 2;
}

message CreateInlineAttemptRequest {
  string examId = 1;
  repeated string userAnswer = 2;
  string sectionType = 3;
}

message CreateOutlineAttemptRequestWriting {
  string examId = 1;
  repeated QuestionUserAnswerWriting Qua = 2;
}

message CreateOutlineAttemptRequestSpeaking{
  string examId = 1;
  string question = 2;
  bytes voiceAnswer = 3;
  int32 partNumber = 4;
}

message QuestionUserAnswerWriting {
  string question = 1;
  string userAnswer = 2;
}

message Empty {}
