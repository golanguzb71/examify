// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: ielts.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IeltsService_CreateBook_FullMethodName                   = "/ielts.IeltsService/CreateBook"
	IeltsService_DeleteBook_FullMethodName                   = "/ielts.IeltsService/DeleteBook"
	IeltsService_GetAllBook_FullMethodName                   = "/ielts.IeltsService/GetAllBook"
	IeltsService_UpdateBookById_FullMethodName               = "/ielts.IeltsService/UpdateBookById"
	IeltsService_CreateAnswer_FullMethodName                 = "/ielts.IeltsService/CreateAnswer"
	IeltsService_DeleteAnswer_FullMethodName                 = "/ielts.IeltsService/DeleteAnswer"
	IeltsService_GetAnswer_FullMethodName                    = "/ielts.IeltsService/GetAnswer"
	IeltsService_CreateExam_FullMethodName                   = "/ielts.IeltsService/CreateExam"
	IeltsService_GetExamByUserId_FullMethodName              = "/ielts.IeltsService/GetExamByUserId"
	IeltsService_GetResultsInlineBySection_FullMethodName    = "/ielts.IeltsService/GetResultsInlineBySection"
	IeltsService_GetResultOutlineWriting_FullMethodName      = "/ielts.IeltsService/GetResultOutlineWriting"
	IeltsService_GetResultOutlineSpeaking_FullMethodName     = "/ielts.IeltsService/GetResultOutlineSpeaking"
	IeltsService_GetTopExamResultList_FullMethodName         = "/ielts.IeltsService/GetTopExamResultList"
	IeltsService_CreateAttemptInline_FullMethodName          = "/ielts.IeltsService/CreateAttemptInline"
	IeltsService_CreateAttemptOutlineWriting_FullMethodName  = "/ielts.IeltsService/CreateAttemptOutlineWriting"
	IeltsService_CreateAttemptOutlineSpeaking_FullMethodName = "/ielts.IeltsService/CreateAttemptOutlineSpeaking"
)

// IeltsServiceClient is the client API for IeltsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IeltsServiceClient interface {
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	GetAllBook(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllBookResponse, error)
	UpdateBookById(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	DeleteAnswer(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	GetAnswer(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*GetAnswerResponse, error)
	CreateExam(ctx context.Context, in *CreateExamRequest, opts ...grpc.CallOption) (*CreateExamResponse, error)
	GetExamByUserId(ctx context.Context, in *GetExamByUserIdRequest, opts ...grpc.CallOption) (*GetExamByUserIdResponse, error)
	GetResultsInlineBySection(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error)
	GetResultOutlineWriting(ctx context.Context, in *GetResultOutlineAbsRequest, opts ...grpc.CallOption) (*GetResultOutlineWritingResponse, error)
	GetResultOutlineSpeaking(ctx context.Context, in *GetResultOutlineSpeakingRequest, opts ...grpc.CallOption) (*GetResultOutlineSpeakingResponse, error)
	GetTopExamResultList(ctx context.Context, in *GetTopExamRequest, opts ...grpc.CallOption) (*GetTopExamResult, error)
	CreateAttemptInline(ctx context.Context, in *CreateInlineAttemptRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	CreateAttemptOutlineWriting(ctx context.Context, in *CreateOutlineAttemptRequestWriting, opts ...grpc.CallOption) (*AbsResponse, error)
	CreateAttemptOutlineSpeaking(ctx context.Context, in *CreateOutlineAttemptRequestSpeaking, opts ...grpc.CallOption) (*AbsResponse, error)
}

type ieltsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIeltsServiceClient(cc grpc.ClientConnInterface) IeltsServiceClient {
	return &ieltsServiceClient{cc}
}

func (c *ieltsServiceClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, IeltsService_CreateBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, IeltsService_DeleteBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) GetAllBook(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllBookResponse)
	err := c.cc.Invoke(ctx, IeltsService_GetAllBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) UpdateBookById(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, IeltsService_UpdateBookById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, IeltsService_CreateAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) DeleteAnswer(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, IeltsService_DeleteAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) GetAnswer(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*GetAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnswerResponse)
	err := c.cc.Invoke(ctx, IeltsService_GetAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) CreateExam(ctx context.Context, in *CreateExamRequest, opts ...grpc.CallOption) (*CreateExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExamResponse)
	err := c.cc.Invoke(ctx, IeltsService_CreateExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) GetExamByUserId(ctx context.Context, in *GetExamByUserIdRequest, opts ...grpc.CallOption) (*GetExamByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExamByUserIdResponse)
	err := c.cc.Invoke(ctx, IeltsService_GetExamByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) GetResultsInlineBySection(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResultResponse)
	err := c.cc.Invoke(ctx, IeltsService_GetResultsInlineBySection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) GetResultOutlineWriting(ctx context.Context, in *GetResultOutlineAbsRequest, opts ...grpc.CallOption) (*GetResultOutlineWritingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResultOutlineWritingResponse)
	err := c.cc.Invoke(ctx, IeltsService_GetResultOutlineWriting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) GetResultOutlineSpeaking(ctx context.Context, in *GetResultOutlineSpeakingRequest, opts ...grpc.CallOption) (*GetResultOutlineSpeakingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResultOutlineSpeakingResponse)
	err := c.cc.Invoke(ctx, IeltsService_GetResultOutlineSpeaking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) GetTopExamResultList(ctx context.Context, in *GetTopExamRequest, opts ...grpc.CallOption) (*GetTopExamResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopExamResult)
	err := c.cc.Invoke(ctx, IeltsService_GetTopExamResultList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) CreateAttemptInline(ctx context.Context, in *CreateInlineAttemptRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, IeltsService_CreateAttemptInline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) CreateAttemptOutlineWriting(ctx context.Context, in *CreateOutlineAttemptRequestWriting, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, IeltsService_CreateAttemptOutlineWriting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ieltsServiceClient) CreateAttemptOutlineSpeaking(ctx context.Context, in *CreateOutlineAttemptRequestSpeaking, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, IeltsService_CreateAttemptOutlineSpeaking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IeltsServiceServer is the server API for IeltsService service.
// All implementations must embed UnimplementedIeltsServiceServer
// for forward compatibility.
type IeltsServiceServer interface {
	CreateBook(context.Context, *CreateBookRequest) (*AbsResponse, error)
	DeleteBook(context.Context, *DeleteBookRequest) (*AbsResponse, error)
	GetAllBook(context.Context, *Empty) (*GetAllBookResponse, error)
	UpdateBookById(context.Context, *UpdateBookRequest) (*AbsResponse, error)
	CreateAnswer(context.Context, *CreateAnswerRequest) (*AbsResponse, error)
	DeleteAnswer(context.Context, *DeleteBookRequest) (*AbsResponse, error)
	GetAnswer(context.Context, *GetAnswerRequest) (*GetAnswerResponse, error)
	CreateExam(context.Context, *CreateExamRequest) (*CreateExamResponse, error)
	GetExamByUserId(context.Context, *GetExamByUserIdRequest) (*GetExamByUserIdResponse, error)
	GetResultsInlineBySection(context.Context, *GetResultRequest) (*GetResultResponse, error)
	GetResultOutlineWriting(context.Context, *GetResultOutlineAbsRequest) (*GetResultOutlineWritingResponse, error)
	GetResultOutlineSpeaking(context.Context, *GetResultOutlineSpeakingRequest) (*GetResultOutlineSpeakingResponse, error)
	GetTopExamResultList(context.Context, *GetTopExamRequest) (*GetTopExamResult, error)
	CreateAttemptInline(context.Context, *CreateInlineAttemptRequest) (*AbsResponse, error)
	CreateAttemptOutlineWriting(context.Context, *CreateOutlineAttemptRequestWriting) (*AbsResponse, error)
	CreateAttemptOutlineSpeaking(context.Context, *CreateOutlineAttemptRequestSpeaking) (*AbsResponse, error)
	mustEmbedUnimplementedIeltsServiceServer()
}

// UnimplementedIeltsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIeltsServiceServer struct{}

func (UnimplementedIeltsServiceServer) CreateBook(context.Context, *CreateBookRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedIeltsServiceServer) DeleteBook(context.Context, *DeleteBookRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedIeltsServiceServer) GetAllBook(context.Context, *Empty) (*GetAllBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBook not implemented")
}
func (UnimplementedIeltsServiceServer) UpdateBookById(context.Context, *UpdateBookRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookById not implemented")
}
func (UnimplementedIeltsServiceServer) CreateAnswer(context.Context, *CreateAnswerRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswer not implemented")
}
func (UnimplementedIeltsServiceServer) DeleteAnswer(context.Context, *DeleteBookRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnswer not implemented")
}
func (UnimplementedIeltsServiceServer) GetAnswer(context.Context, *GetAnswerRequest) (*GetAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswer not implemented")
}
func (UnimplementedIeltsServiceServer) CreateExam(context.Context, *CreateExamRequest) (*CreateExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExam not implemented")
}
func (UnimplementedIeltsServiceServer) GetExamByUserId(context.Context, *GetExamByUserIdRequest) (*GetExamByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExamByUserId not implemented")
}
func (UnimplementedIeltsServiceServer) GetResultsInlineBySection(context.Context, *GetResultRequest) (*GetResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultsInlineBySection not implemented")
}
func (UnimplementedIeltsServiceServer) GetResultOutlineWriting(context.Context, *GetResultOutlineAbsRequest) (*GetResultOutlineWritingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultOutlineWriting not implemented")
}
func (UnimplementedIeltsServiceServer) GetResultOutlineSpeaking(context.Context, *GetResultOutlineSpeakingRequest) (*GetResultOutlineSpeakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultOutlineSpeaking not implemented")
}
func (UnimplementedIeltsServiceServer) GetTopExamResultList(context.Context, *GetTopExamRequest) (*GetTopExamResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopExamResultList not implemented")
}
func (UnimplementedIeltsServiceServer) CreateAttemptInline(context.Context, *CreateInlineAttemptRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttemptInline not implemented")
}
func (UnimplementedIeltsServiceServer) CreateAttemptOutlineWriting(context.Context, *CreateOutlineAttemptRequestWriting) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttemptOutlineWriting not implemented")
}
func (UnimplementedIeltsServiceServer) CreateAttemptOutlineSpeaking(context.Context, *CreateOutlineAttemptRequestSpeaking) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttemptOutlineSpeaking not implemented")
}
func (UnimplementedIeltsServiceServer) mustEmbedUnimplementedIeltsServiceServer() {}
func (UnimplementedIeltsServiceServer) testEmbeddedByValue()                      {}

// UnsafeIeltsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IeltsServiceServer will
// result in compilation errors.
type UnsafeIeltsServiceServer interface {
	mustEmbedUnimplementedIeltsServiceServer()
}

func RegisterIeltsServiceServer(s grpc.ServiceRegistrar, srv IeltsServiceServer) {
	// If the following call pancis, it indicates UnimplementedIeltsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IeltsService_ServiceDesc, srv)
}

func _IeltsService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_DeleteBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).DeleteBook(ctx, req.(*DeleteBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_GetAllBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).GetAllBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_GetAllBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).GetAllBook(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_UpdateBookById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).UpdateBookById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_UpdateBookById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).UpdateBookById(ctx, req.(*UpdateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_CreateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).CreateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_CreateAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).CreateAnswer(ctx, req.(*CreateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_DeleteAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).DeleteAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_DeleteAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).DeleteAnswer(ctx, req.(*DeleteBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_GetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).GetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_GetAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).GetAnswer(ctx, req.(*GetAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_CreateExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).CreateExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_CreateExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).CreateExam(ctx, req.(*CreateExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_GetExamByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).GetExamByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_GetExamByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).GetExamByUserId(ctx, req.(*GetExamByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_GetResultsInlineBySection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).GetResultsInlineBySection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_GetResultsInlineBySection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).GetResultsInlineBySection(ctx, req.(*GetResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_GetResultOutlineWriting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultOutlineAbsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).GetResultOutlineWriting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_GetResultOutlineWriting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).GetResultOutlineWriting(ctx, req.(*GetResultOutlineAbsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_GetResultOutlineSpeaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultOutlineSpeakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).GetResultOutlineSpeaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_GetResultOutlineSpeaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).GetResultOutlineSpeaking(ctx, req.(*GetResultOutlineSpeakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_GetTopExamResultList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).GetTopExamResultList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_GetTopExamResultList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).GetTopExamResultList(ctx, req.(*GetTopExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_CreateAttemptInline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInlineAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).CreateAttemptInline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_CreateAttemptInline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).CreateAttemptInline(ctx, req.(*CreateInlineAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_CreateAttemptOutlineWriting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOutlineAttemptRequestWriting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).CreateAttemptOutlineWriting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_CreateAttemptOutlineWriting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).CreateAttemptOutlineWriting(ctx, req.(*CreateOutlineAttemptRequestWriting))
	}
	return interceptor(ctx, in, info, handler)
}

func _IeltsService_CreateAttemptOutlineSpeaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOutlineAttemptRequestSpeaking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IeltsServiceServer).CreateAttemptOutlineSpeaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IeltsService_CreateAttemptOutlineSpeaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IeltsServiceServer).CreateAttemptOutlineSpeaking(ctx, req.(*CreateOutlineAttemptRequestSpeaking))
	}
	return interceptor(ctx, in, info, handler)
}

// IeltsService_ServiceDesc is the grpc.ServiceDesc for IeltsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IeltsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ielts.IeltsService",
	HandlerType: (*IeltsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _IeltsService_CreateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _IeltsService_DeleteBook_Handler,
		},
		{
			MethodName: "GetAllBook",
			Handler:    _IeltsService_GetAllBook_Handler,
		},
		{
			MethodName: "UpdateBookById",
			Handler:    _IeltsService_UpdateBookById_Handler,
		},
		{
			MethodName: "CreateAnswer",
			Handler:    _IeltsService_CreateAnswer_Handler,
		},
		{
			MethodName: "DeleteAnswer",
			Handler:    _IeltsService_DeleteAnswer_Handler,
		},
		{
			MethodName: "GetAnswer",
			Handler:    _IeltsService_GetAnswer_Handler,
		},
		{
			MethodName: "CreateExam",
			Handler:    _IeltsService_CreateExam_Handler,
		},
		{
			MethodName: "GetExamByUserId",
			Handler:    _IeltsService_GetExamByUserId_Handler,
		},
		{
			MethodName: "GetResultsInlineBySection",
			Handler:    _IeltsService_GetResultsInlineBySection_Handler,
		},
		{
			MethodName: "GetResultOutlineWriting",
			Handler:    _IeltsService_GetResultOutlineWriting_Handler,
		},
		{
			MethodName: "GetResultOutlineSpeaking",
			Handler:    _IeltsService_GetResultOutlineSpeaking_Handler,
		},
		{
			MethodName: "GetTopExamResultList",
			Handler:    _IeltsService_GetTopExamResultList_Handler,
		},
		{
			MethodName: "CreateAttemptInline",
			Handler:    _IeltsService_CreateAttemptInline_Handler,
		},
		{
			MethodName: "CreateAttemptOutlineWriting",
			Handler:    _IeltsService_CreateAttemptOutlineWriting_Handler,
		},
		{
			MethodName: "CreateAttemptOutlineSpeaking",
			Handler:    _IeltsService_CreateAttemptOutlineSpeaking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ielts.proto",
}
